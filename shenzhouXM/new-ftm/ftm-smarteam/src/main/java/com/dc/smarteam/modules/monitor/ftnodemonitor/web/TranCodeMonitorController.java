package com.dc.smarteam.modules.monitor.ftnodemonitor.web;import com.dc.smarteam.common.json.ResultDto;import com.dc.smarteam.common.json.ResultDtoTool;import com.dc.smarteam.common.persistence.Page;import com.dc.smarteam.common.utils.StringUtils;import com.dc.smarteam.helper.PageHelper;import com.dc.smarteam.modules.file.entity.BizFileDownloadLog;import com.dc.smarteam.modules.file.entity.BizFileUploadLog;import com.dc.smarteam.modules.file.service.impl.BizFileDownloadLogServiceImpl;import com.dc.smarteam.modules.file.service.impl.BizFileUploadLogServiceImpl;import com.dc.smarteam.modules.monitor.ftnodemonitor.entity.TranCodeMonitor;import com.dc.smarteam.modules.serviceinfo.entity.FtServiceInfo;import com.dc.smarteam.service.ServiceInfoServiceI;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 交易码动态，展示交易码最近使用时间等信息 * Created by Administrator on 2017/8/26. */@Slf4j@RestController@RequestMapping(value = "${adminPath}/monitor/FtNodeMonitor/trancodemonitor")public class TranCodeMonitorController {    @Resource(name = "ServiceInfoServiceImpl")    private ServiceInfoServiceI serviceInfoService;    @Resource    private BizFileUploadLogServiceImpl bizFileUploadLogService;    @Resource    private BizFileDownloadLogServiceImpl bizFileDownloadLogService;    /*@RequiresPermissions("NodeMonitor:tranCodeMonitor:view")*/    @GetMapping(value = "/trancodelist")    public ResultDto<Map<String, Object>> list(TranCodeMonitor tranCodeMonitor, HttpServletRequest request, HttpServletResponse response) {// NOSONAR        Map<String, Object> resultMap = new HashMap<>();        List<FtServiceInfo> ftServiceInfoList = serviceInfoService.getFtServiceInfoList();        resultMap.put("ftServiceInfoList", ftServiceInfoList);        List<TranCodeMonitor> tranCodeMonitorList = new ArrayList<>();        //根据交易码查询        if (StringUtils.isNotEmpty(tranCodeMonitor.getTranCode())) {            String tranCode = tranCodeMonitor.getTranCode();            TranCodeMonitor tranCodeMonitorTmp = new TranCodeMonitor();            for (FtServiceInfo ftServiceInfo : ftServiceInfoList) {                if (StringUtils.equals(ftServiceInfo.getTrancode(), tranCode)) {                    tranCodeMonitorTmp.setTranCode(tranCode);                    tranCodeMonitorTmp.setDescribe(ftServiceInfo.getDescribe());                    Map<String, String> map = new HashMap<>();                    map.put("tranCode", tranCodeMonitor.getTranCode());                    tranCodeMonitorTmp = findListFromUpAndDown(tranCodeMonitorTmp, map);                    tranCodeMonitorList.add(tranCodeMonitorTmp);                    PageHelper.getInstance().getPage(TranCodeMonitor.class, request, response, resultMap, tranCodeMonitorList);                    return ResultDtoTool.buildSucceed("success",resultMap);                }            }        }        //分页查询        Page<TranCodeMonitor> page = new Page<>(request, response);        int pageNoIndex = page.getPageNo();        int pageSize = page.getPageSize();        page.setCount(ftServiceInfoList.size());        for (int i = (pageNoIndex - 1) * pageSize; i < pageNoIndex * pageSize; i++) {            if (i == ftServiceInfoList.size()) break;            TranCodeMonitor tranCodeMonitorTmp = new TranCodeMonitor();            tranCodeMonitorTmp.setDescribe(ftServiceInfoList.get(i).getDescribe());            tranCodeMonitorTmp.setTranCode(ftServiceInfoList.get(i).getTrancode());            Map<String, String> map = new HashMap<>();            map.put("tranCode", ftServiceInfoList.get(i).getTrancode());            tranCodeMonitorTmp = findListFromUpAndDown(tranCodeMonitorTmp, map);            tranCodeMonitorList.add(tranCodeMonitorTmp);        }        page.setList(tranCodeMonitorList);        resultMap.put("page", page);        return ResultDtoTool.buildSucceed("success",resultMap);    }    /**     * 从上传流水表、下载流水表中，找到该交易码的信息     */    private TranCodeMonitor findListFromUpAndDown(TranCodeMonitor tranCodeMonitor, Map<String, String> map) {        List<BizFileUploadLog> uploadLogList = bizFileUploadLogService.findListByTranCodeAndFileName(map);        if (!uploadLogList.isEmpty()) {            tranCodeMonitor.setOriFilename(uploadLogList.get(0).getOriFileName());            tranCodeMonitor.setUploadTime(uploadLogList.get(0).getStartTime());            tranCodeMonitor.setFileName(uploadLogList.get(0).getFileName());        }        List<BizFileDownloadLog> downloadLogList = bizFileDownloadLogService.findListByTranCodeAndFileName(map);        if (!downloadLogList.isEmpty()) {            tranCodeMonitor.setDownloadTime(downloadLogList.get(0).getStartTime());        }        return tranCodeMonitor;    }}